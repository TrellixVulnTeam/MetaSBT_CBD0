#!/bin/bash
#title          :index
#description    :Retrieve reference genomes and MAGs from NCBI GenBank and build a Sequence Bloom Tree for each species with kmtricks 
#author         :Fabio Cumbo (fabio.cumbo@gmail.com)
#====================================================================================================================================

DATE="May 3, 2022"
VERSION="0.1.0"

# Define script directory
INDEX_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Check for external software dependencies
check_dependencies () {
    printf "Checking for software dependencies\n"
    # Define the set of dependencies
    DEPENDENCIES=("kmtricks" "ncbitax2lin" "wget")

    # Count how many missing dependencies
    MISSING=0
    for dep in "${DEPENDENCIES[@]}"; do
        # Check for dependency
        if ! command -v $dep &> /dev/null ; then
            printf "\t[--] %s\n" "$dep"
            MISSING=$(($MISSING + 1))
        else
            printf "\t[OK] %s\n" "$dep"
        fi
    done
    
    if [ "$MISSING" -gt "0" ]; then
        printf "\nPlease, install all the missing dependencies and try again.\n\n"
        return 1
    fi
    
    printf "\nAll required dependencies satisfied!\n\n"
    return 0
}

# Format seconds in human-readable format
# Credits: https://unix.stackexchange.com/a/27014
displaytime () {
    DAYS=$(bc <<< "${1}/60/60/24")
    HOURS=$(bc <<< "${1}/60/60%24")
    MINUTES=$(bc <<< "${1}/60%60")
    SECONDS=$(bc <<< "${1}%60")
    if [[ "$DAYS" -gt "0" ]]; then printf "%s days " "$DAYS"; fi
    if [[ "$HOURS" -gt "0" ]]; then printf "%s hours " "$HOURS"; fi
    if [[ "$MINUTES" -gt "0" ]]; then printf "%s minutes " "$MINUTES"; fi
    if [[ "$DAYS" -gt "0" ]] || [[ "$HOURS" -gt "0" ]] || [[ "$MINUTES" -gt "0" ]]; then printf "and "; fi
    printf "%s seconds\n" "$SECONDS"
}

# Download genomes from NCBI GenBank
esearch_txid () {
    DB_DIR=$1
    TAX_ID=$2
    FULL_TAXONOMY=$3
    GENOME_CATEGORY=$4
    SEARCH_CRITERIA=$5
    # Download GCAs associated to a specific tax_id
    esearch -db assembly -query "txid${TAX_ID} ${SEARCH_CRITERIA}" < /dev/null \
        | esummary \
        | xtract -pattern DocumentSummary -element FtpPath_GenBank \
        | while read -r URL; do
            # Create a directory for the current taxonomy
            TAXDIR=${DB_DIR}/$(echo "${FULL_TAXONOMY}" | sed 's/|/\//g')
            OUTDIR=$TAXDIR/genomes
            mkdir -p $OUTDIR
            # Download GCA
            FNAME=$(echo $URL | grep -o 'GCA_.*' | sed 's/$/_genomic.fna.gz/')
            GCA=${FNAME%%.*}
            if [[ -f "${OUTDIR}/${GCA}.fna.gz" ]]; then
                wget -q "$URL/$FNAME" -O ${OUTDIR}/${GCA}.fna.gz
                if [[ -f "${OUTDIR}/${GCA}.fna.gz" ]]; then
                    if gzip -t ${OUTDIR}/${GCA}.fna.gz; then
                        # Define a file of file (fof) with the list of genomes for current species
                        GCAPATH=$(readlink -m ${OUTDIR}/${GCA}.fna.gz)
                        printf "%s : %s\n" "$GCA" "$GCAPATH" >> $TAXDIR/genomes.fof
                        printf "%s\n" "$GCA" >> $TAXDIR/${GENOME_CATEGORY}.txt
                    else
                        # Delete corrupted genome
                        rm ${OUTDIR}/${GCA}.fna.gz
                        printf "\t[ERROR][ID=%s][TAXID=%s] Corrupted genome\n" "$GCA" "${TAX_ID}"
                    fi
                else
                    # Report missing genomes
                    printf "\t[ERROR][ID=%s][TAXID=%s] Unable to download genome\n" "$GCA" "${TAX_ID}"
                fi
            fi
          done
}

# Define default value for --nproc and --xargs-nproc
NPROC=1
XARGS_NPROC=1

# Parse input arguments
for ARG in "$@"; do
    case "$ARG" in
        --filter-size=*)
            # Bloom filter size
            FILTER_SIZE="${ARG#*=}"
            # Define helper
            if [[ "${FILTER_SIZE}" =~ "?" ]]; then
                printf "index helper: --filter-size=num\n\n"
                printf "\tThis is the size of the bloom filters.\n\n"
                exit 0
            fi
            # Check whether --filter-size is an integer
            if [[ ! ${FILTER_SIZE} =~ ^[0-9]+$ ]] || [[ "${FILTER_SIZE}" -eq "0" ]]; then
                printf "Argument --filter-size must be a positive integer greater than 0\n"
                exit 1
            fi
            ;;
        -h|--help)
            # Print extended help
            INDEX_HELP=true
            source ${INDEX_DIR}/HELP
            exit 0
            ;;
        --kmer-len=*)
            # Length of the kmers
            KMER_LEN="${ARG#*=}"
            # Define helper
            if [[ "${KMER_LEN}" =~ "?" ]]; then
                printf "index helper: --kmer-len=num\n\n"
                printf "\tThis is the length of the kmers used for building bloom filters.\n\n"
                exit 0
            fi
            # Check whether --kmer-len is an integer
            if [[ ! ${KMER_LEN} =~ ^[0-9]+$ ]] || [[ "${KMER_LEN}" -eq "0" ]]; then
                printf "Argument --kmer-len must be a positive integer greater than 0\n"
                exit 1
            fi
            ;;
        --license)
            # Print license
            printf "%s\n" "$(cat ${INDEX_DIR}/LICENSE)"
            exit 0
            ;;
        --nproc=*)
            # Max nproc for all parallel instructions
            NPROC="${ARG#*=}"
            # Define helper
            if [[ "${NPROC}" =~ "?" ]]; then
                printf "index helper: --nproc=num\n\n"
                printf "\tThis argument refers to the number of processors used for parallelizing the pipeline when possible.\n"
                printf "\tDefault: --nproc=1\n\n"
                exit 0
            fi
            # Check whether --proc is an integer
            if [[ ! $NPROC =~ ^[0-9]+$ ]] || [[ "$NPROC" -eq "0" ]]; then
                printf "Argument --nproc must be a positive integer greater than 0\n"
                exit 1
            fi
            ;;
        --resolve-dependencies)
            # Check for external software dependencies and python modules
            check_dependencies
            exit $?
            ;;
        -v|--version)
            # Print pipeline version
            printf "index version %s (%s)\n" "$VERSION" "$DATE"
            exit 0
            ;;
        --work-dir=*)
            # Working directory
            WORKDIR="${ARG#*=}"
            # Define helper
            if [[ "${WORKDIR}" =~ "?" ]]; then
                printf "index helper: --work-dir=directory\n\n"
                printf "\tThis is the working directory that will contain genomes organised by species and their index produced by kmtricks.\n\n"
                exit 0
            fi
            # Reconstruct the full path
            WORKDIR="$( cd "$( dirname "${WORKDIR}" )" &> /dev/null && pwd )"/"$( basename $WORKDIR )"
            # Trim the last slash out of the path
            WORKDIR="${WORKDIR%/}"
            ;;
        --xargs-nproc=*)
            # Max number of independent runs of kmtricks
            XARGS_NPROC="${ARG#*=}"
            # Define helper
            if [[ "${XARGS_NPROC}" =~ "?" ]]; then
                printf "index helper: --xargs-nproc=num\n\n"
                printf "\tThis refers to the number of xargs processes used for launching independent runs of kmtricks.\n"
                printf "\tDefault: --xargs-nproc=1\n\n"
                exit 0
            fi
            # Check whether --xargs-nproc is an integer
            if [[ ! $XARGS_NPROC =~ ^[0-9]+$ ]] || [[ "$XARGS_NPROC" -eq "0" ]]; then
                printf "Argument --xargs-nproc must be a positive integer greater than 0\n"
                exit 1
            fi
            ;;
        *)
            printf "index: invalid option -- %s\n" "$ARG"
            exit 1
            ;;
    esac
done

printf "index version %s (%s)\n\n" "$VERSION" "$DATE"
PIPELINE_START_TIME="$(date +%s.%3N)"

check_dependencies
if [[ "$?" -gt "0" ]]; then
    exit 1
fi

# Init database directory
DBDIR=$WORKDIR/db

# Download taxonomy dump from NCBI
TAXDUMP="ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz"
printf "Downloading taxonomy dump from NCBI\n"
printf "\t%s\n\n" "$TAXDUMP"

wget -N $TAXDUMP -P $WORKDIR
mkdir -p $WORKDIR/taxdump && tar zxf $WORKDIR/taxdump.tar.gz -C $WORKDIR/taxdump

# Export lineages
printf "Exporting lineages\n"
ncbitax2lin --nodes-file $WORKDIR/taxdump/nodes.dmp \
            --names-file $WORKDIR/taxdump/names.dmp \
            --output $WORKDIR/ncbi_lineages.csv.gz

# Build a mapping between tax id and full taxonomy
# Keep Bacteria and Archaea only
# Remove special characters
# Fill empty taxa level with "unclassified"
printf "Building tax id to full taxonomy mapping\n"
zcat $WORKDIR/ncbi_lineages.csv.gz | \
    awk 'BEGIN { FS=","; OFS="" } 
               { gsub(" ", "_"); gsub(/\.|\047|\"|\(|\)|\:/, "") }
               {
                    if ($3=="") {
                        phylum_pre=$2;
                        phylum_suf="_unclassified";
                    } else {
                        phylum_pre=$3;
                        phylum_suf="";
                    }
               } {
                    if ($4=="") {
                        class_pre=phylum_pre; 
                        class_suf="_unclassified";
                    } else { 
                        class_pre=$4; 
                        class_suf="";
                    }
               } {
                    if ($5=="") { 
                        order_pre=class_pre; 
                        order_suf="_unclassified";
                    } else { 
                        order_pre=$5; 
                        order_suf="";
                    }
               } {
                    if ($6=="") {
                        family_pre=order_pre; 
                        family_suf="_unclassified";
                    } else { 
                        family_pre=$6; 
                        family_suf="";
                    }
               } {
                    if ($7=="") { 
                        genus_pre=family_pre; 
                        genus_suf="_unclassified"; 
                    } else { 
                        genus_pre=$7; 
                        genus_suf="";
                    }
               } {
                    if ($8=="") { 
                        species_pre=genus_pre; 
                        species_suf="_unclassified";
                    } else {
                        species_pre=$8; 
                        species_suf="";
                    }
               } { 
                    if (NR>1 && ($2=="Bacteria" || $2=="Archaea")) {
                        print $1, "\t", "k__", $2,
                                        "|p__", phylum_pre, phylum_suf,
                                        "|c__", class_pre, class_suf,
                                        "|o__", order_pre, order_suf,
                                        "|f__", family_pre, family_suf,
                                        "|g__", genus_pre, genus_suf,
                                        "|s__", species_pre, species_suf;
                    }
               }' > $WORKDIR/taxa.tsv

# Download all GCAs associated to the taxa IDs in taxa.tsv
# Use genomes that have not been excluded from RefSeq
# https://www.ncbi.nlm.nih.gov/assembly/help/anomnotrefseq/
printf "Downloading genomes from NCBI GenBank\n"
while read tax_id, taxonomy; do
    SEARCH_CRITERIA="NOT excluded-from-refseq [PROP]"
    esearch_txid $DBDIR ${tax_id} $taxonomy "references" ${SEARCH_CRITERIA}
    # Run esearch_txid again for downloading genomes with no search criteria
    # Genomes already processed with the previous esearch_txid run are skipped
    esearch_txid $DBDIR ${tax_id} $taxonomy "mags"
done < $WORKDIR/taxa.tsv

# Run kmtricks and build a sequence bloom tree for each species
printf "Running kmtricks at the species level\n"
NFOFIN=`find $DBDIR -type f -iname "genomes.fof" | wc -l`   # Count how many genomes.fof files (one for each species)
NFOFOUT=`find $DBDIR -type f -iname "kmtricks.fof" | wc -l` # Count how many kmtricks.fof files (copy of genomes.fof generated by kmtricks)
while [ $NFOFOUT -lt $NFOFIN ]; do
    find $DBDIR -type f -iname "genomes.fof" -follow | xargs -n 1 -P ${XARGS_NPROC} -I {} bash -c \
        'INPUT={}; \
         echo $INPUT >> '"${DBDIR}"'/kmtricks.log; \
         FOLDERPATH=$(dirname "$INPUT"); \
         kmtricks pipeline --file $INPUT \
                           --run-dir $FOLDERPATH/index \
                           --kmer-size '"${KMER_LEN}"' \
                           --mode hash:bft:bin \
                           --hard-min 1 \
                           --bloom-size '"${FILTER_SIZE}"' \
                           --bf-format howdesbt \
                           --cpr \
                           --skip-merge \
                           -t '"${NPROC}"'; \
         kmtricks index --run-dir $FOLDERPATH/index --howde;'
    # Search for missing species and process them one by one
    NFOFOUT=`find $DBDIR -type f -iname "kmtricks.fof" | wc -l`
    XARGS_NPROC=1
done

PIPELINE_END_TIME="$(date +%s.%3N)"
PIPELINE_ELAPSED="$(bc <<< "${PIPELINE_END_TIME}-${PIPELINE_START_TIME}")"
printf "\tTotal elapsed time: %s\n\n" "$(displaytime ${PIPELINE_ELAPSED})"

exit 0